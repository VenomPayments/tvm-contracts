// SPDX-License-Identifier: UNLICENSED
pragma ever-solidity >= 0.62.0;


import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import "./libraries/Gas.tsol";
import "./libraries/Errors.tsol";
import "./libraries/Callback.tsol";
import "./interfaces/IShop.tsol";
import "./interfaces/IShopFactory.tsol";
import "broxus-token-contracts/contracts/interfaces/ITokenWalletUpgradeable.tsol";
import "broxus-token-contracts/contracts/interfaces/ITokenRoot.tsol";


contract Shop is IShop {
    uint128 constant CONTRACT_MIN_BALANCE = 1 ever;

    uint32 ID;
    address root;
    address usdt;
    address usdtWallet;
    uint128 usdtBalance;
    address owner;
    string name;
    string description;
    TvmCell platform_code;
    uint32 currentVersion;

    constructor() public { revert(); }

    function getDetails() external view returns (
        uint32 _ID,
        address _root,
        address _usdt,
        address _usdtWallet,
        uint128 _usdtBalance,
        address _owner,
        string _name,
        string _description,
        uint32 _currentVersion
    ) {
        _ID = ID;
        _root = root;
        _usdt = usdt;
        _usdtWallet = usdtWallet;
        _usdtBalance = usdtBalance;
        _owner = owner;
        _name = name;
        _description = description;
        _currentVersion = currentVersion;
    }

    function _reserve() internal pure returns (uint128) {
        return math.max(address(this).balance - msg.value, CONTRACT_MIN_BALANCE);
    }

    modifier reserve() {
        tvm.rawReserve(_reserve(), 0);
        _;
    }

    modifier onlyRoot() {
        require (msg.sender == root, Errors.NOT_ROOT);
        _;
    }

    modifier onlyOwner() {
        require (msg.sender == owner, Errors.NOT_OWNER);
        _;
    }

    function _setupTokenWallets() internal view {
        ITokenRoot(usdt).deployWallet{value: Gas.TOKEN_WALLET_DEPLOY_VALUE, callback: IShop.receiveTokenWalletAddress }(
            address(this), // owner
            Gas.TOKEN_WALLET_DEPLOY_VALUE / 2 // deploy grams
        );
    }

    function receiveTokenWalletAddress(address wallet) external override {
        if (msg.sender == usdt) usdtWallet = wallet;
    }

    function encodeTokenTransfer(uint32 orderId, uint32 call_id) external pure returns (TvmCell) {
        return abi.encode(orderId, call_id);
    }

    function onAcceptTokensTransfer(
        address,
        uint128 amount,
        address sender,
        address,
        address remainingGasTo,
        TvmCell payload
    ) external override reserve {
        require (msg.sender == usdtWallet, Errors.NOT_TOKEN_WALLET);

        (uint32 orderId, uint32 call_id) = payload.toSlice().decode(uint32, uint32);
        usdtBalance += amount;
        emit Payment(call_id, sender, amount, orderId);
        remainingGasTo.transfer(0, false, MsgFlag.ALL_NOT_RESERVED);
    }

    function withdraw(uint128 amount, Callback.CallMeta meta) external onlyOwner reserve {
        require (amount <= usdtBalance, Errors.LOW_BALANCE);
        usdtBalance -= amount;
        emit Withdraw(meta.call_id, amount);

        TvmCell empty;
        ITokenWallet(usdtWallet).transfer{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(
            amount,
            msg.sender,
            0,
            meta.send_gas_to,
            false,
            empty
        );
    }

    function upgrade(TvmCell new_code, uint32 new_version, Callback.CallMeta meta) external onlyRoot override {
        if (new_version == currentVersion) {
            tvm.rawReserve(_reserve(), 0);
            meta.send_gas_to.transfer({ value: 0, bounce: false, flag: MsgFlag.ALL_NOT_RESERVED });
            return;
        }

        uint8 _tmp;
        TvmBuilder main_builder;
        main_builder.store(root); // address 267
        main_builder.store(_tmp); // 8
        main_builder.store(meta.send_gas_to); // address 267

        main_builder.storeRef(platform_code); // ref

        TvmBuilder initial;
        initial.store(ID);

        main_builder.storeRef(initial); // ref 2

        TvmBuilder params;
        params.store(new_version);
        params.store(currentVersion);

        main_builder.storeRef(params); // ref3

        TvmCell storage_data = abi.encode(owner, usdt, name, description);
        TvmCell data = abi.encode(meta.call_id, storage_data);

        main_builder.storeRef(data); // ref4

        tvm.setcode(new_code);
        // run onCodeUpgrade from new code
        tvm.setCurrentCode(new_code);
        onCodeUpgrade(main_builder.toCell());
    }

    function onCodeUpgrade(TvmCell upgrade_data) private {
        tvm.resetStorage();
        tvm.rawReserve(_reserve(), 0);

        TvmSlice s = upgrade_data.toSlice();
        (address root_, , address send_gas_to) = s.decode(address, uint8, address);
        root = root_;

        platform_code = s.loadRef();

        TvmSlice initialData = s.loadRefAsSlice();
        ID = initialData.decode(uint32);

        TvmCell params = s.loadRef();
        TvmCell main_data;
        (currentVersion,,main_data) = abi.decode(params, (uint32, uint32, TvmCell));

        uint32 call_id;
        (owner, usdt, name, description, call_id) = abi.decode(main_data, (address, address, string, string, uint32));

        _setupTokenWallets();
        IShopFactory(root).onShopDeploy{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(ID, owner, Callback.CallMeta(call_id, send_gas_to));
    }
}
